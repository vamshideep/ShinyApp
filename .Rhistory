M <- abs(cor(training[,varsall[ourvars]))
M <- abs(cor(training[,ourvars))
M <- abs(cor(training[,ourvars]))
ourvars <- grep("^[iI]L|^diagnosis",varsall)
varsall[ourvars]
ourvars <- grep("^[iI]L|^diagnosis",varsall)
ourvars1 <- ourvars
M <- abs(cor(training[,ourvars]))
varsall[ourvars]
ourvars <- grep("^[iI]L|^diagnosis",varsall)
ourvars1 <- ourvars
ourvars
M <- abs(cor(training[,ourvars]))
ourvars <- grep("^[iI]L",varsall)
M <- abs(cor(training[,ourvars]))
ourvars5 <- grep("^[iI]L|^diagnosis",varsall)
ourvars <- grep("^[iI]L",varsall)
ourvars5 <- grep("^[iI]L|^diagnosis",varsall)
ourvars1 <- ourvars
ourvars
M <- abs(cor(training[,ourvars]))
diag(M) <- 0
which(M > 0.8,arr.ind=T)
ourvars5
preProc <- preProcess(training[,ourvars5],method="pca",thresh=0.80)
preProc <- preProcess(training[,ourvars],method="pca",thresh=0.80)
print(preProc)
rm(list=ls())
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
varsall <- names(training)
ourvars <- grep("^[iI]L",varsall)
ourvars5 <- grep("^[iI]L|^diagnosis",varsall)
preProc <- preProcess(training[,ourvars],method="pca",thresh=0.80)
print(preProc)
preProc <- preProcess(training[,ourvars],method="pca",thresh=0.80)
print(preProc)
preProc <- preProcess(training[,ourvars],method="pca",thresh=0.80)
trainPC <- predict(preProc,training[,ourvars])
modelFit <- train(training$diagnosis ~ .,method="glm",data=trainPC)
testPC <- predict(preProc,testing[,ourvars])
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
rm(list=ls())
install.packages("Hmisc")
library(Hmisc)
library(AppliedPredictiveModeling)
library(caret)
data(concrete)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
summary(training$CompressiveStrength)
featurePlot(x=training[,c("Cement")],y=training$CompressiveStrength,plot="pairs")
cutAge <- cut2(training$Age,g=3)
cutFly <- cut2(training$FlyAsh,g=3)
table(cutAge)
plot(training$CompressiveStrength,col=cutFly)
cutFly <- cut2(training$FlyAsh,g=3)
cutAge <- cut2(training$Age,g=3)
cutCement <- cut2(training$Cement,g=3)
cutFurnace <- cut2(training$BlastFurnaceslag,g=3)
cutWater <- cut2(training$Water,g=3)
cutPlast <- cut2(training$Superplasticizer,g=3)
cutCoarse <- cut2(training$CoarseAggregate,g=3)
cutFine <- cut2(training$FineAggregate,g=3)
cutFurnace <- cut2(training$BlastFurnaceSlag,g=3)
cutAge <- cut2(training$Age,g=3)
cutCement <- cut2(training$Cement,g=3)
cutFurnace <- cut2(training$BlastFurnaceSlag,g=3)
cutWater <- cut2(training$Water,g=3)
cutPlast <- cut2(training$Superplasticizer,g=3)
cutCoarse <- cut2(training$CoarseAggregate,g=3)
cutFine <- cut2(training$FineAggregate,g=3)
plot(training$CompressiveStrength,col=cutFly)
plot(training$CompressiveStrength,col=cutAge)
plot(training$CompressiveStrength,col=cutFurnace)
plot(training$CompressiveStrength,col=cutWater)
plot(training$CompressiveStrength,col=cutPlast)
plot(training$CompressiveStrength,col=cutCoarse)
plot(training$CompressiveStrength,col=cutFine)
plot(training$CompressiveStrength,col=cutCement)
plot(training$CompressiveStrength,col=cutFly)
hist(training$SuperPlasticizer)
hist(training$Superplasticizer)
hist(log(training$Superplasticizer)
)
hist(log(training$Superplasticizer+1))
setwd("C:/Users/vdeversh/Downloads/Datanovo")
library(caret)
FinalDecision <- read.csv("Dataset_07-Sep-2014_7pmPDT.csv", header=TRUE,stringsAsFactors=FALSE,na.strings="")
#We are using only complete cases for our model(If data is misisng, we ar enot including them in our model)
cleanData <- FinalDecision[complete.cases(FinalDecision),]
names(cleanData)
summary(cleanData$UNNAMED.THREE)
sum(cleanData$UNNAMED.THREE)
which(cleanData$UNNAMED.THREE==1)
which(cleanData$UNNAMED.ONE==1)
which(cleanData$UNNAMED.TWO==1)
removerows <- which(cleanData$UNNAMED.THREE==1)
#all of them point to same rows
#removing rows, where we do not have any data about Judges
dim(cleanData[-removerows,])
cleanData <- cleanData[-removerows,]
# No more negative numbers in our claims canceled and claims affirmed
summary(cleanData$X..of.claims.canceled)
summary(cleanData$X..of.claims.affirmed)
names(cleanData)
##Removing claims granted and claims cancelled as they are intererring with the model
cleanData <- cleanData[,c(-5,-4)]
dim(cleanData)
names(cleanData)
#class(cleanData$X..of.claims.affirmed) <- "factor"
set.seed(1235)
inTrain <- createDataPartition(y=cleanData$X..of.claims.granted,p=0.7,list=FALSE)
training <- cleanData[inTrain,]
testing <- cleanData[-inTrain,]
summary(testing$X..of.claims.granted)
originalGranted <- testing$X..of.claims.granted
originalGranted
testing$X..of.claims.granted <- 0
#summary(testing$X..of.claims.canceled)
#originalCanceled <- testing$X..of.claims.canceled
#originalCanceled
#testing$X..of.claims.canceled <- 0
names(training)
set.seed(1235)
modFit <- lm(X..of.claims.granted ~ .,data=training)
pred <- predict(modFit,testing)
pred <- round(pred,0)
pred
originalGranted
#varImp(pred)
#confusionMatrix(pred,testing$X..of.claims.granted)
table(pred,originalCanceled)
table(pred,originalGranted)
dim(testing)
dim(training)
names(cleanData)
set.seed(1235)
inTrain <- createDataPartition(y=cleanData$X..of.claims.granted,p=0.7,list=FALSE)
training <- cleanData[inTrain,]
testing <- cleanData[-inTrain,]
dim(training)
names(testing)
dim(testing)
summary(testing$X..of.claims.granted)
originalGranted <- testing$X..of.claims.granted
originalGranted
testing$X..of.claims.granted <- 0
names(testing)
summary(testing$X..of.claims.granted)
names(training)
names(testing)
set.seed(1235)
modFit <- lm(X..of.claims.granted ~ .,data=training)
pred
rm(pred)
pred
pred <- predict(modFit,testing)
modFit <- train(X..of.claims.granted~.,method="lm",data=training)
pred <- predict(modFit,testing)
modFit <- train(X..of.claims.granted ~ .,method="lm",data=training)
warnings(modFit <- train(X..of.claims.granted ~ .,method="lm",data=training))
warnings()
pred <- predict(modFit,testing)
pred <- round(pred,0)
pred
originalGranted
#varImp(pred)
#confusionMatrix(pred,testing$X..of.claims.granted)
table(pred,originalGranted)
confusionMatrix(pred,testing$X..of.claims.granted)
confusionMatrix(originalGranted,testing$X..of.claims.granted)
class(originalGranted)
class(originalGranted) <- "factor"
class(originalGranted)
confusionMatrix(originalGranted,testing$X..of.claims.granted)
confusionMatrix(originalGranted,originalGranted)
str(originalGranted)
set.seed(1235)
inTrain <- createDataPartition(y=cleanData$X..of.claims.granted,p=0.7,list=FALSE)
training <- cleanData[inTrain,]
testing <- cleanData[-inTrain,]
dim(training)
dim(testing)
names(testing)
summary(testing$X..of.claims.granted)
originalGranted <- testing$X..of.claims.granted
originalGranted
testing$X..of.claims.granted <- 0
names(testing)
names(training)
set.seed(1235)
modFit <- train(X..of.claims.granted ~ .,method="lm",data=training)
pred <- predict(modFit,testing)
pred <- round(pred,0)
pred
originalGranted
originalGranted <- factor(originalGranted)
class(originalGranted)
confusionMatrix(originalGranted,originalGranted)
confusionMatrix(pred,originalGranted)
pred <- factor(pred)
confusionMatrix(pred,originalGranted)
pred <- factor(pred)
originalGranted <- factor(originalGranted)
class(originalGranted)
table(pred,originalGranted)
pred
originalGranted
setwd("C:/Users/vdeversh/Downloads/CourseEra/RegModel/Quiz")
setwd("C:/Users/vdeversh/Downloads/CourseEra/RegModel/Quiz/Q3")
rm(list=ls())
data(InsectSprays)
summary(Insects)
summary(InsectSprays)
names(InsectSprays)
lm(count ~ spray, data=InsectSprays)
unique(ave(InsectSprays$count, InsectSprays$spray))
(ave(InsectSprays$count, InsectSprays$spray))
?ave
data(mtcars)
summary(mtcars)
summary(mtcars$cyl)
mtcars$cylf <- factor(mtcars$cyl)
summary(mtcars$cyl)
summary(mtcars$cylf)
lm(mpg ~ cyclf + wt,data=mtcars)
cars <- (mtcars)
summary(cars)
cars$cylf <- factor(cars$cyl)
summary(cars)
lm(mpg ~ cyclf + wt,data=cars)
lm(mpg ~ cylf + wt,data=cars)
lm(mpg ~ cylf + wt -1,data=cars)
lm(mpg ~ cylf + wt,data=cars)
lm(mpg ~ wt, data=cars)
lm(mpg ~ cylf + wt -1,data=cars)
lm(mpg ~ cylf + wt,data=cars)
lm(mpg ~ wt, data=cars)
summary(lm(mpg ~ cylf + wt,data=cars))
cars$cycl==4
cars$cylf==4
cars[cars$cylf==4]
cars[cars$cylf==4,]
cars[cars$cylf==4,mpg]
cars[cars$cylf==4,]
summary(lm(mpg ~ cylf + wt,data=cars))
x1 <- 1
x2 <- 1
x3 <- 1
x4 <- 1
y <- (33.991)*x1 -4.2556*x2 -6.0709*x3 -3.2056*x4
y
summary(lm(mpg ~ cylf,data=cars))
xx1 <- 1
xx2 <- 1
xx3 <- 1
yy <- (26.6636)*xx1 -6.9208*xx2 -11.5636*xx3
yy
y
x1 <- 1
x2 <- 1
x3 <- 1
x4 <- 1
x1 <- 0
x2 <- 0
x3 <- 1
x4 <- 1
y <- (33.991)*x1 -4.2556*x2 -6.0709*x3 -3.2056*x4
y
x3 <- 1+1
x4 <- 1
y <- (33.991)*x1 -4.2556*x2 -6.0709*x3 -3.2056*x4
y
x3 <- 1
x4 <- 0
y <- (33.991)*x1 -4.2556*x2 -6.0709*x3 -3.2056*x4
y
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y ~ x)
round(hatvalues(fit), 3)
?hatvalues
round(hatvalues(fit))
hatvalues(fit)
round(hatvalues(fit),4)
round(dfbetas(fit)[1 : 10, 2], 3)
round(dfbetas(fit), 3)
round(dfbetas(fit)[,2], 3)
round(dfbetas(fit)[,2], 4)
round(hatvalues(fit),4)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y ~ x)
round(dfbetas(fit)[,2], 4)
round(hatvalues(fit),4)
plot(x,y)
fit <- lm(y ~ x)
abline(fit)
round(hatvalues(fit),4)
round(dfbetas(fit)[,2], 4)
summary(lm(mpg ~ cylf + wt,data=cars))
summary(lm(mpg ~ cylf + wt + cylf:wt,data=cars))
summary(lm(mpg ~ cylf + wt + cylf:wt,data=cars))$coef
summary(lm(mpg ~ cylf + wt,data=cars))$coef
fit1 <- (lm(mpg ~ cylf*wt,data=cars))
fit2 <- (lm(mpg ~ cylf + wt + cylf:wt,data=cars))
anova(fit1,fit2)
fit1 <- (lm(mpg ~ cylf + wt + cylf*wt,data=cars))
fit2 <- (lm(mpg ~ cylf + wt + cylf:wt,data=cars))
anova(fit1,fit2)
fit1 <- (lm(mpg ~ cylf + wt + numeric(cylf)*wt,data=cars))
names(cars)
numeric(cars$cyclf)
numeric(cars$cylf)
as.numeric(cars$cylf)
fit1 <- (lm(mpg ~ cylf + wt + as.numeric(cylf)*wt,data=cars))
fit2 <- (lm(mpg ~ cylf + wt + as.numeric(cylf):wt,data=cars))
anova(fit1,fit2)
fit1 <- (lm(mpg ~ cylf + wt + as.numeric(cylf)*wt,data=cars))
fit2 <- (lm(mpg ~ cylf + wt,data=cars))
anova(fit1,fit2)
summary(lm(mpg ~ cylf + wt ,data=cars))
summary(lm(mpg ~ cylf,data=cars))
summary(lm(mpg ~ cylf + wt ,data=cars))$coef
summary(lm(mpg ~ cylf,data=cars))$coef
fit2 <- (lm(mpg ~ cylf + wt + as.numeric(cylf)*wt,data=cars))
fit1 <- (lm(mpg ~ cylf + wt,data=cars))
anova(fit1,fit2)
fit2 <- (lm(mpg ~ cylf + wt + (cylf)*wt,data=cars))
fit1 <- (lm(mpg ~ cylf + wt,data=cars))
anova(fit1,fit2)
anova(fit2,fit1)
setwd("C:/Users/vdeversh/Downloads/CourseEra/RegModel/Project")
rm(list=ls())
summary(cars)
data(mtcars)
summary(mtcars)
?mtcars
motorTrend <- mtcars
rm(lists=ls())
rm(list=ls())
motorTrend <- data(mtcars)
summary(motorTrend)
motorTrend <- data(mtcars)
summary(motorTrend)
motorTrend <- mtcars
summary(motorTrend)
motorTrend$am
class(motorTrend$am)
motorTrend$amf <- factor(motortrend$am)
motorTrend$amf <- factor(motorTrend$am)
motorTrend$amf
fit <- lm(motorTrend$mpg ~ motorTrend$amf)
summary(fit)
plot(amf,mpg,data=motorTrend)
plot(motorTrend$amf,motortrend$mpg)
plot(motorTrend$amf,motorTrend$mpg)
summary(fit)
summary(fit)$coef
?mtcars
summary(fit)$coef
fit1 <- lm(motorTrend$mpg ~ motorTrend$amf)
summary(fit1)$coef
fit2 <- lm(mpg ~ amf + factor(cyl)+ disp + ho + wt, data=motorTrend)
fit2 <- lm(mpg ~ amf + factor(cyl)+ disp + hp + wt, data=motorTrend)
summary(fit2)$coef
summary(fit1)$coef
motorTrend <- mtcars
summary(motorTrend)
class(motorTrend$am)
motorTrend$amf <- factor(motorTrend$am,labels=c("Automatic","Manual"))
motorTrend$amf
fit1 <- lm(motorTrend$mpg ~ motorTrend$amf)
summary(fit1)$coef
fit2 <- lm(mpg ~ amf + factor(cyl)+ disp + hp + wt, data=motorTrend)
summary(fit2)$coef
plot(motorTrend$amf,motorTrend$mpg)
plot(motorTrend$amf,motorTrend$mpg,col=green)
plot(motorTrend$amf,motorTrend$mpg,col="green"")
plot(motorTrend$amf,motorTrend$mpg,col="green")
plot(motorTrend$amf,motorTrend$mpg,col="green")
plot(motorTrend$amf,motorTrend$mpg,col="green",ylab="MPG")
plot(fit2)
plot(fit1)
summary(motorTrend)
str(motorTrend)
t.test(mpg ~ am, data=mcars)
t.test(mpg ~ am, data=mtcars)
fit1 <- lm(motorTrend$mpg ~ motorTrend$amf)
#Fit2 takes AMF, cyl , disp, hp, wt as regressers for our model
fit2 <- lm(mpg ~ amf + factor(cyl)+ disp + hp + wt, data=motorTrend)
#comparing coeffecients of fit1 and fit2
summary(fit1)$coef
summary(fit2)$coef
onova(fit1,fit2)
anova(fit1,fit2)
anova(fit1,fit2)
summary(fit2)$coef
summary(fit2)
setwd("C:/Users/vdeversh/Downloads/CourseEra/DataProducts/Projects")
rm(list=ls())
library(shiny)
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h3('Sidebar text')
),
mainPanel(
h3('Main Panel text')
)
))
runApp()
runApp()
runApp()
))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
fit1 <- lm(mpg ~ cyl + am, data=mtcars)
newdata <- data.frame("cyl","am")
newdata
newdata <- c(1,1)
newdata
names(newdata)
names(newdata) <- c("cyl",am)
names(newdata) <- c("cyl","am")
newdata
newdata <- data.frame()
newdata
names(newdata) <- c("cyl","am")
newdata <- data.frame(cyl="",am="")
newdata
newdata <- c(1,1)
newdata
newdata
names(newdata)
newdata[,] <- c(1,1)
newdata[1] <- c(1,1)
newdata[1,] <- c(1,1)
newdata
newdata <- data.frame(cyl="",am="")
newdata
newdata[1]
newdata[1,]
cyli=1
ami1=1
newdata <- data.frame(cyli,ami)
ami=1
newdata <- data.frame(cyli,ami)
names(newdata)
newdata
rm(list=ls())
data(mtcars)
fit1 <- lm(mpg ~ cyl + am, data=mtcars)
summary(mtcars$cyl)
summary(mtcars$am)
cyl <- 4
am <- 0
newdata <- data.frame(cyl,am)
fit1 <- lm(mpg ~ cyl + am, data=mtcars)
predict(fit1,newdata)
summary(mtcars$mpg)
rm(list=ls())
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages("shinyapps")
library(shinyapps)
shinyapps::setAccountInfo(name='vamshideep', token='F1C6388DF4B72A0E2CB71F38D668B2FD', secret='tqXxoiYL3EOEPqXpAdxxlUjvoaMKDL+do9ZsdChs')
install.packages("shinyapps")
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
shiny::runApp()
shinyapps::setAccountInfo(name='vamshideep', token='F1C6388DF4B72A0E2CB71F38D668B2FD', secret='tqXxoiYL3EOEPqXpAdxxlUjvoaMKDL+do9ZsdChs')
deployApp()
library(shinyapps)
deployApp()
library(slidify)
author("vamshideep")
author("predictMPG")
